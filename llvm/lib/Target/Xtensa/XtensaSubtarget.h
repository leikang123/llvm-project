//===-- XtensaSubtarget.h - Define Subtarget for the Xtensa ---------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the Xtensa specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_Xtensa_XtensaSUBTARGET_H
#define LLVM_LIB_TARGET_Xtensa_XtensaSUBTARGET_H

#include "XtensaFrameLowering.h"
#include "XtensaISelLowering.h"
#include "XtensaInstrInfo.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/MC/MCInstrItineraries.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER


namespace llvm {
class StringRef;

class XtensaTargetMachine;

class XtensaSubtarget : public XtensaGenSubtargetInfo {
  virtual void anchor();

protected:
  enum XtensaArchEnum {
    Xtensa32I,
    Xtensa32II
  };

  // Xtensa architecture version
  // Controled by -mcpu in commandline
  XtensaArchEnum XtensaArchVersion;

  // IsLittle - The target is Little Endian
  bool IsLittle;

  bool EnableOverflow;

  // HasCmp - cmp instructions.
  bool HasCmp;

  // HasSlt - slt instructions.
  bool HasSlt;

  InstrItineraryData InstrItins;

  const XtensaTargetMachine &TM;

  Triple TargetTriple;

  const SelectionDAGTargetInfo TSInfo;

  std::unique_ptr<const XtensaInstrInfo> InstrInfo;
  std::unique_ptr<const XtensaFrameLowering> FrameLowering;
  std::unique_ptr<const XtensaTargetLowering> TLInfo;

public:
  bool isPositionIndependent() const;
  const XtensaABIInfo &getABI() const;

  // This constructor initializes the data members to match that
  // of the specified triple.
  XtensaSubtarget(const Triple &TT, const std::string &CPU, const std::string &FS,
                bool little, const XtensaTargetMachine &_TM);

  // Parses features string setting specified
  // subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

  bool isLittle() const { return IsLittle; }
  bool hasXtensa32I() const { return XtensaArchVersion >= Xtensa32I; }
  bool isXtensa32I() const { return XtensaArchVersion == Xtensa32I; }
  bool hasXtensa32II() const { return XtensaArchVersion >= Xtensa32II; }
  bool isXtensa32II() const { return XtensaArchVersion == Xtensa32II; }

  // Features related to the presence of specific instructions.
  bool enableOverflow() const { return EnableOverflow; }
  bool disableOverflow() const { return !EnableOverflow; }
  bool hasCmp()   const { return HasCmp; }
  bool hasSlt()   const { return HasSlt; }

  bool abiUsesSoftFloat() const;

  bool enableLongBranchPass() const {
    return hasXtensa32II();
  }

  unsigned stackAlignment() const { return 8; }

  XtensaSubtarget &initializeSubtargetDependencies(StringRef CPU, StringRef FS,
                                                 const TargetMachine &TM);

  const SelectionDAGTargetInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }
  const XtensaInstrInfo *getInstrInfo() const override { return InstrInfo.get(); }
  const TargetFrameLowering *getFrameLowering() const override {
    return FrameLowering.get();
  }
  const XtensaRegisterInfo *getRegisterInfo() const override {
    return &InstrInfo->getRegisterInfo();
  }
  const XtensaTargetLowering *getTargetLowering() const override {
    return TLInfo.get();
  }
  const InstrItineraryData *getInstrItineraryData() const override {
    return &InstrItins;
  }
};
} // End llvm namespace

#endif
